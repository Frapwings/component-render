#!/usr/bin/env node

/*!
 * import(s)
 */
var debug = require('debug')('component-render');
var program = require('commander');
var fs = require('fs');
var path = require('path');
var format = require('util').format;
var jade = require('../')


// parse argv
program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[options]')
  .option('-t, --template <template>', 'target <template> file')
  .option('-p, --path <path>', 'filename used to resolve <path> includes')
  .option('-l, --local <json>', 'local <json> file')
  .option('-o, --out <dir>', 'output to the cimpiled html to <dir>')
  .option('-u, --use <name>', 'use the given render <name> plugin')
  .parse(process.argv);

// check template option
if (!program.template) {
  program.help();
  process.exit(1);
  return;
}
debug('template option:', program.template);

jade(program, function (err, html) {
  if (err) {
    debug('jade render error', err);
    process.exit(1);
    return;
  }
  
  var out_dir = __dirname;
  if (program.out) {
    if (!fs.existsSync(program.out)) {
      fs.mkdirSync(program.out);
    }
    out_dir = program.out;
  }

  var out_path = path.join(
    out_dir,
    format('%s.html', path.basename(program.template, '.jade'))
  );
  debug('out_path: %s', out_path);
  fs.writeFile(out_path, html, function (err) {
    if (err) {
      debug('write file error', err);
      process.exit(1);
      return;
    }

    process.exit(0);
  });
});
