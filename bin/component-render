#!/usr/bin/env node

/*!
 * import(s)
 */
var debug = require('debug')('component-render');
var program = require('commander');
var fs = require('fs');
var mkdir = require('mkdirp').sync;
var path = require('path');
var format = require('util').format;


var loadRenderer = function (plugin) {
  var renderer;
  var resolve_path = path.resolve(plugin);
  var exists = fs.existsSync(resolve_path) || fs.existsSync(resolve_path + '.js');
  debug('resolve_path = %s, exists = %s', resolve_path, exists);

  if (exists) {
    renderer = require(resolve_path);
  } else {
    try {
      renderer = require(plugin);
    } catch (e) {
      debug('global plugin load error');

      var module_path = path.resolve('node_modules', plugin);
      debug('module_path', module_path);
      try {
        renderer = require(module_path);
      } catch (e) {
        debug('local plugin load error');
      }
    }
  }

  return renderer;
};


// parse argv
program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[options] <template>')
  .option('-l, --local <json>', 'local <json> file')
  .option('-o, --out <path>', 'output html file <path>')
  .option('-u, --use <name>', 'use the given render <name> plugin')
  .parse(process.argv);

// check template option
if (program.args.length === 0) {
  program.help();
  process.exit(1);
  return;
}

// check use option
var renderer = require('../'); // default 'jade'
if (program.use) {
  renderer = loadRenderer(program.use);
}

var template = program.args[0];
renderer(template, program, function (err, html) {
  if (err) {
    debug('renderer error', err);
    process.exit(1);
    return;
  }
  
  var out_dir = process.cwd();
  var out_path = path.join(
    out_dir,
    format('%s.html', path.basename(template, path.extname(template)))
  );
  if (program.out) {
    out_dir = path.dirname(program.out);
    mkdir(out_dir);
    out_path = program.out;
  }
  debug('out_path: %s', out_path);

  fs.writeFile(out_path, html, function (err) {
    if (err) {
      debug('write file error', err);
      process.exit(1);
      return;
    }

    process.exit(0);
  });
});
